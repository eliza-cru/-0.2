# import telebot
# import random
# from telebot import types
# # import speech_recognition as sr
# # from pydub import AudioSegment
# # import os

# API_TOKEN = '7333127473:AAGzpKwddu7iVl-_l6C7bM-bSnGU8Jp_IQ4'

# bot = telebot.TeleBot(API_TOKEN, parse_mode='HTML')



# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# @bot.message_handler(commands=['start'])
# def send_welcome(message): 
#     #—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 
#     markip = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
#     btn1 = types.KeyboardButton('/help')
#     btn2 = types.KeyboardButton('/rad')
#     markip.add(btn1, btn2)
#     # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä—É

#     #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞ 
#     bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markip)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
# @bot.message_handler(commands=['help'])
# def send_help(message):
#     help_text = (
#         "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
#         "/start - –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
#         "/rad - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
#         "/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö\n"
#     )
#     bot.reply_to(message, help_text)
# def send_help(messege):
#     bot.reply_to(message)
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rad
# @bot.message_handler(commands=['rad'])
# def send_random_image(message):
    

#     try:
#         # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9
#         random_index = random.randint(0, 2)
#         image_path = f"./img/image{random_index}.jpg"
        
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#         with open(image_path, 'rb') as image_file:
#             bot.send_photo(message.chat.id, image_file)
#     except Exception as e:
#         bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @bot.message_handler(content_types=['voice'])
# def handle_voice(message):
#     try:
#         file_info = bot.get_file(message.voice.file_id)
#         downloaded_file = bot.download_file(file_info.file_path)

#         voice_ogg_path = "voice.ogg"
#         voice_wav_path = "voice.wav"

#         with open(voice_ogg_path, 'wb') as new_file:
#             new_file.write(downloaded_file)

#         audio = AudioSegment.from_ogg(voice_ogg_path)
#         audio.export(voice_wav_path, format="wav")

#         recognizer = sr.Recognizer()
#         with sr.AudioFile(voice_wav_path) as source:
#             audio_data = recognizer.record(source)
#             text = recognizer.recognize_google(audio_data, language="ru-RU")
#             bot.reply_to(message, f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")

#         # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
#         os.remove(voice_ogg_path)
#         os.remove(voice_wav_path)
#     except Exception as e:
#         bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—à–∏–±–∫–∞: {e}")

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# @bot.message_handler(content_types=['photo', 'video', 'sticker'])
# def handle_image(message):
#     choice = random.choice(['üòç', 'üëç', 'üëé', '–ù—É —Ç–∞–∫–æ–µ...']) 
#     bot.reply_to(message, choice)

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @bot.message_handler()
# def handle_unknown_command(message):
#     bot.reply_to(message, "<b>–Ø –Ω–µ —Ö–æ—á—É —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –Ω–∞ —ç—Ç—É —Ç–µ–º—É...</b>")

# # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# bot.polling()






import telebot
import sqlite3


API_TOKEN = "7333127473:AAGzpKwddu7iVl-_l6C7bM-bSnGU8Jp_IQ4"
bot = telebot.TeleBot(API_TOKEN, parse_mode='HTML')

conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    username TEXT                                                        
    )                           
    ''')
conn.commit()

text_message = ""

@bot.message_handler(commands=["start"])
def send_welkom(message):
    user_id = message.from_user.id 
    username = message.from_user.id


    cursor.execute('''
    SELECT * FROM users WHERE user_id = ?
    ''', (user_id,))
    excepting_user = cursor.fetchone()


    if excepting_user:
        print(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    else:
        cursor.execute('''
        INSERT INTO users (user_id, username)
        VALUES (? , ?)                                                                             
        ''', (user_id, username,))
        conn.commit()
        print(f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ DB")

    bot.send_message(message.chat.id, "–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å !")    

@bot.message_handler(commands=['sand'])
def hadle_send(message):
    if message.from_user.id != 1784663884:
        bot.reply_to(message, "—É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã !")
        return
 
    bot.send_message(message.chat.id, '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Ö—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    bot.register_next_step_handler(message, process_text)

def process_text(messege):
    global text_message
    text_message = messege.text
    bot.send_message(messege.chat.id, "—Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å ->")

    send_broadcast()

def send_broadcast():
    global text_message
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()

    for user in users:
        user_id = user[0]
        try:
            bot.send_message(user_id, text_message)
        except Exception as e:
            print(f"–æ—à–∏–±–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")

text_message = "" 

@bot.message_handler()
def unkl_command(message):
    if message.text == ".":
        bot.reply_to(message, "–∞ —ç—Ç–æ –∫—Ä—É—Ç–∞—è —Ç–µ–º–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ !")

bot.polling()
